version: '3.8'

services:
  mysqldb:
    image: mysql:5.7
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - MYSQL_DATABASE=$MYSQLDB_DATABASE
      - MYSQL_USER=$MYSQLDB_USER
      - MYSQL_PASSWORD=$MYSQLDB_PASSWORD
    ports:
      - $MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT
    volumes:
      - db:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQLDB_USER}", "-p${MYSQLDB_PASSWORD}"]
      interval: 1s
      timeout: 5s
      retries: 20
    networks:
      - flyquest

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - flyquest
  
  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_MS: 10000
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 5000
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server kafka:9092 > /dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - flyquest

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    ports:
      - "9009:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092" 
      SERVER_SERVLET_CONTEXTPATH: "/"
    networks:
      - flyquest

  app:
    depends_on:
      mysqldb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    build: ./backend
    image: backend
    container_name: backend
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT
    environment:
      SPRING_APPLICATION_JSON: '{
              "spring.kafka.bootstrap-servers": "kafka:9092",
              "spring.datasource.url"  : "jdbc:mysql://mysqldb:$MYSQLDB_DOCKER_PORT/$MYSQLDB_DATABASE?useSSL=false",
              "spring.datasource.username" : "$MYSQLDB_USER",
              "spring.datasource.password" : "$MYSQLDB_PASSWORD",
              "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQLDialect",
              "spring.jpa.hibernate.ddl-auto" : "update"
            }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:$SPRING_DOCKER_PORT/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - flyquest

  datagen:
    build: ./datagen
    image: datagen
    container_name: datagen
    env_file: ./.env
    ports:
      - $datagen_local_port:$datagen_docker_port
    depends_on:
      mysqldb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      app:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - flyquest

  web:
    build: ./frontend
    image: frontend
    container_name: frontend_ies
    depends_on:
      app:
        condition: service_healthy
    env_file: ./.env
    ports:
      - $web_local_port:$web_docker_port
    restart: unless-stopped
    stdin_open: true
    networks:
      - flyquest

volumes:
    db:

networks:
  flyquest:
    driver: bridge